// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: excel_table.proto

package excel_table

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExcelTable_GetTopCadets_FullMethodName = "/excel_table.ExcelTable/GetTopCadets"
)

// ExcelTableClient is the client API for ExcelTable service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExcelTableClient interface {
	GetTopCadets(ctx context.Context, in *TopCadetsRequest, opts ...grpc.CallOption) (*TopCadetsResponse, error)
}

type excelTableClient struct {
	cc grpc.ClientConnInterface
}

func NewExcelTableClient(cc grpc.ClientConnInterface) ExcelTableClient {
	return &excelTableClient{cc}
}

func (c *excelTableClient) GetTopCadets(ctx context.Context, in *TopCadetsRequest, opts ...grpc.CallOption) (*TopCadetsResponse, error) {
	out := new(TopCadetsResponse)
	err := c.cc.Invoke(ctx, ExcelTable_GetTopCadets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExcelTableServer is the server API for ExcelTable service.
// All implementations must embed UnimplementedExcelTableServer
// for forward compatibility
type ExcelTableServer interface {
	GetTopCadets(context.Context, *TopCadetsRequest) (*TopCadetsResponse, error)
	mustEmbedUnimplementedExcelTableServer()
}

// UnimplementedExcelTableServer must be embedded to have forward compatible implementations.
type UnimplementedExcelTableServer struct {
}

func (UnimplementedExcelTableServer) GetTopCadets(context.Context, *TopCadetsRequest) (*TopCadetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopCadets not implemented")
}
func (UnimplementedExcelTableServer) mustEmbedUnimplementedExcelTableServer() {}

// UnsafeExcelTableServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExcelTableServer will
// result in compilation errors.
type UnsafeExcelTableServer interface {
	mustEmbedUnimplementedExcelTableServer()
}

func RegisterExcelTableServer(s grpc.ServiceRegistrar, srv ExcelTableServer) {
	s.RegisterService(&ExcelTable_ServiceDesc, srv)
}

func _ExcelTable_GetTopCadets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopCadetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExcelTableServer).GetTopCadets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExcelTable_GetTopCadets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExcelTableServer).GetTopCadets(ctx, req.(*TopCadetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExcelTable_ServiceDesc is the grpc.ServiceDesc for ExcelTable service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExcelTable_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "excel_table.ExcelTable",
	HandlerType: (*ExcelTableServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTopCadets",
			Handler:    _ExcelTable_GetTopCadets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "excel_table.proto",
}
